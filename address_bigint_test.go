package ethaddr_test

import (
	"testing"

	"fmt"
	"math/big"

	"github.com/reiver/go-ethaddr"
)

func TestAddress_BigInt(t *testing.T) {

	tests := []struct{
		Address ethaddr.Address
		Expected *big.Int
	}{
		{
			Address: ethaddr.Nothing(),
			Expected: nil,
		},



		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00} ),
			Expected: big.NewInt(0),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01} ),
			Expected: big.NewInt(1),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02} ),
			Expected: big.NewInt(2),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03} ),
			Expected: big.NewInt(3),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04} ),
			Expected: big.NewInt(4),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05} ),
			Expected: big.NewInt(5),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06} ),
			Expected: big.NewInt(6),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07} ),
			Expected: big.NewInt(7),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08} ),
			Expected: big.NewInt(8),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09} ),
			Expected: big.NewInt(9),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A} ),
			Expected: big.NewInt(10),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B} ),
			Expected: big.NewInt(11),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C} ),
			Expected: big.NewInt(12),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D} ),
			Expected: big.NewInt(13),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E} ),
			Expected: big.NewInt(14),
		},
		{
			Address: ethaddr.Something( [20]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F} ),
			Expected: big.NewInt(15),
		},



		{
			Address: ethaddr.Something( [20]byte{0x5a,0xAe,0xb6,0x05,0x3F,0x3E,0x94,0xC9,0xb9,0xA0,0x9f,0x33,0x66,0x94,0x35,0xE7,0xEf,0x1B,0xeA,0xed} ),
			Expected: func() *big.Int {
				var str string = "517705355260207604495801938720638392742277016301"

				var bigint big.Int
				_, ok := bigint.SetString(str, 10)
				if !ok {
					panic(fmt.Sprintf("could not convert %q to a big.Int", str))
				}
				return &bigint
			}(),
		},



		{
			Address: ethaddr.Something( [20]byte{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF} ),
			Expected: func() *big.Int {
				var str string = "1461501637330902918203684832716283019655932542975"

				var bigint big.Int
				_, ok := bigint.SetString(str, 10)
				if !ok {
					panic(fmt.Sprintf("could not convert %q to a big.Int", str))
				}
				return &bigint
			}(),
		},
	}

	for testNumber, test := range tests {

		actual := test.Address.BigInt()

		expected := test.Expected

		if ( (nil == expected || nil == actual) && (expected != actual) )   ||   (0 != expected.Cmp(actual)) {
				t.Errorf("For test #%d, the actual value for the resulting big-int is not what was expected", testNumber)
			t.Logf("EXPECTED: %#v", expected)
			t.Logf("ACTUAL:   %#v", actual)
			t.Logf("ADDRESS: %#v", test.Address)
			continue
		}

	}
}
